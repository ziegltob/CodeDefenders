/**
 * Copyright (C) 2016-2018 Code Defenders contributors
 *
 * This file is part of Code Defenders.
 *
 * Code Defenders is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Code Defenders is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Code Defenders. If not, see <http://www.gnu.org/licenses/>.
 */
package org.codedefenders.game.singleplayer.automated.defender;

import com.sun.corba.se.impl.orb.DataCollectorBase;
import org.codedefenders.execution.AntRunner;
import org.codedefenders.execution.ExecutorPool;
import org.codedefenders.game.*;
import org.codedefenders.execution.MutationTester;
import org.codedefenders.game.duel.DuelGame;
import org.codedefenders.game.multiplayer.MultiplayerGame;
import org.codedefenders.game.singleplayer.AiPlayer;
import org.codedefenders.game.singleplayer.NoDummyGameException;
import org.codedefenders.game.singleplayer.PrepareAI;
import org.codedefenders.database.DatabaseAccess;
import org.codedefenders.execution.TargetExecution;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.crypto.Data;
import java.io.File;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * @author Ben Clegg
 * An AI defender. Uses tests generated by EvoSuite to kill mutants.
 */
public class AiDefender extends AiPlayer {

	private static final Logger logger = LoggerFactory.getLogger(AiDefender.class);

	public static final int ID = 2;

	public AiDefender(int gameId) {
		super(DatabaseAccess.getMultiplayerGame(gameId));
		role = Role.DEFENDER;
	}
	public boolean turnHard() {
		//Choose test which kills a high number of generated mutants.
        multiplayerGame = DatabaseAccess.getMultiplayerGame(game.getId());
        if (multiplayerGame.getState() == GameState.FINISHED) {
			if (DatabaseAccess.getJoinedMultiplayerGamesForUser(AiDefender.ID).stream()
					.filter(joinedGames -> joinedGames.getId() == multiplayerGame.getId())
					.findFirst().isPresent()) {
				int aiDefenderPlayerId = IntStream.of(multiplayerGame.getDefenderIds())
						.filter(id -> DatabaseAccess.getUserFromPlayer(id).getId() == AiDefender.ID).findFirst().getAsInt();
				ExecutorPool.getInstanceOf().cancelTask(aiDefenderPlayerId, true);
				return false;
			}
		}
		return runTurn(GenerationMethod.KILLCOUNT);
	}

	public boolean turnEasy() {
		//Choose random test.
        multiplayerGame = DatabaseAccess.getMultiplayerGame(game.getId());
        return runTurn(GenerationMethod.RANDOM);
	}

	/**
	 * Attempts to submit a test, according to a strategy
	 * @param strat Generation strategy to use
	 * @return true if test submitted, false otherwise
	 */
	protected boolean runTurn(GenerationMethod strat) {
		try {
			int tNum = selectTest(strat);
			useTestFromSuite(tNum);
		} catch (NoTestsException e) {
			//No more choices remain - do nothing
			return false;
		} catch (Exception e) {
			//Something's gone wrong
			e.printStackTrace();
			return false;
		}

		return true;
	}

	private int selectTest(GenerationMethod strategy) throws NoTestsException, NoDummyGameException {
	    // game is actually a multiplayer game
        // For further development (singleplayer, DuelGame AI) the game has to be set correctly
        // depending on the GameMode
		List<Integer> usedTests = DatabaseAccess.getUsedAiTestsForGame(game);
		GameClass cut = game.getCUT();
		DuelGame dummyGame = cut.getDummyGame();
		
		//TODO: Discarding useless tests in origtests would be a sideeffect
		List<Test> candidateTests = dummyGame.getTests().stream().filter(test -> !usedTests.contains(test.getId())).collect(Collectors.toList());


		if(candidateTests.isEmpty()) {
			throw new NoTestsException("All generated tests have already been used.");
		}

		switch(strategy) {
			case COVERAGE:
				return getTestIdByCoverage(candidateTests);

			case RANDOM:
				return getTestIdByRandom(candidateTests);

			case KILLCOUNT:
				return getTestIdByKillcount(candidateTests);

			default:
				throw new UnsupportedOperationException("Invalid strategy for AI defender");
		}
	}

	private int getTestIdByCoverage(List<Test> possibleTests) {
		HashSet<Integer> linesModified = new HashSet<Integer>();
		for (Mutant m : game.getAliveMutants()) {
			linesModified.addAll(m.getLines());
		}
		logger.debug("Alive mutated lines: {}", linesModified.toString());

		Test covTest = null;
		int bestCoverage = 0;
		for (Test tst : possibleTests) {
			LineCoverage lc = tst.getLineCoverage(); // test already has line coverage information here
			List<Integer> coveredByTest = lc.getLinesCovered();
			int coverage = 0;

			StringBuilder logOutput = new StringBuilder();
			logOutput.append("String covers lines: ");
			for (int l : coveredByTest) {
				logOutput.append(l);
				if(linesModified.contains(l)) {
					logOutput.append("[HIT]");
					//Test covers this mutated line.
					coverage ++;
				}
				logOutput.append(", ");
			}
			logger.info(logOutput.toString());
			if (coverage > bestCoverage) {
				//Test is the best unused test found.
				covTest = tst;
				bestCoverage = coverage;
			}
		}
		if (covTest != null) {
			//Just use the found test if using line coverage method.
			return covTest.getId();
		} else {
			logger.debug("No test covers an alive mutated line, using killcount instead.");
			return getTestIdByKillcount(possibleTests);
		}
	}

	private int getTestIdByKillcount(List<Test> possibleTests) {
		Collections.sort(possibleTests, new TestComparator());
		List<Mutant> aliveMutants = game.getAliveMutants();
		aliveMutants.sort(Collections.reverseOrder(Comparator.comparing(Mutant::getScore)));

		// HashMap Key: mutantId, Value: List of Tests that cover this Mutant
		HashMap<Integer, List<Test>> mutantCoveredByTests = new HashMap<>();
		for (Test possibleTest : possibleTests) {
			for (Mutant mutant : possibleTest.getCoveredMutants(aliveMutants)) {
				if (mutantCoveredByTests.keySet().contains(mutant.getId())) {
					mutantCoveredByTests.get(mutant.getId()).add(possibleTest);
				} else {
					List<Test> testList = new ArrayList<>();
					testList.add(possibleTest);
					mutantCoveredByTests.put(mutant.getId(), testList);
				}
			}
		}
		// mutantCoveredByTests.entrySet().stream().filter(entry -> entry.getValue().size());

		// brauche f√ºr einen mutanten alle tests die ihn covern
		int bestTestId;
		for (Mutant aliveMutant : aliveMutants) {
			if (mutantCoveredByTests.containsKey(aliveMutant.getId())) {
				for (Test test : mutantCoveredByTests.get(aliveMutant.getId())) {
					// defender score not getting updated bugira
                    boolean takeTest = MutationTester.testOnMutant(multiplayerGame, test, aliveMutant);
					System.out.println("takeTEST: " + takeTest);
					if (takeTest) {
						System.out.println("should actually exit on kill");
						bestTestId = test.getId();
						return bestTestId;
					}
				}
			}
		}

		return -1;
		// int n = PrepareAI.biasedSelection(possibleTests.size(), 0.6);
		// return possibleTests.get(n).getId();
	}

	private int getTestIdByRandom(List<Test> possibleTests) {
		Random r = new Random();
		System.out.println("RANDOM" + r.nextInt(possibleTests.size()));
		Test selected = possibleTests.get(r.nextInt(possibleTests.size()));
		return selected.getId();
	}

	private void useTestFromSuite(int origTestNum) throws NoDummyGameException{
		GameClass cut = game.getCUT();
		DuelGame dummyGame = cut.getDummyGame();
		List<Test> origTests = dummyGame.getTests();

		Test origTest = null;

		for (Test t : origTests) {
			if(t.getId() == origTestNum) {
				origTest = t;
				break;
			}
		}

		if(origTest != null) {
			String jFile = origTest.getJavaFile();
			String cFile = origTest.getClassFile();
			int playerId = DatabaseAccess.getPlayerIdForMultiplayerGame(ID, game.getId());
			Test t = new Test(game.getId(), jFile, cFile, playerId);
			System.out.println("jfile of t " + t.getJavaFile());
			t.insert(false);
			t.update();
			TargetExecution newExec = new TargetExecution(t.getId(), 0, TargetExecution.Target.COMPILE_TEST, "SUCCESS", null);
			newExec.insert();
			MutationTester.runTestOnAllMultiplayerMutants(multiplayerGame, t, messages);
			DatabaseAccess.setAiTestAsUsed(origTestNum, game);
			File dir = new File(origTest.getDirectory());
			AntRunner.testOriginal(dir, t);
			multiplayerGame.update();
			getMessagesLastTurn();
		}
	}

	@Override
	public ArrayList<String> getMessagesLastTurn() {
		boolean killed = false;
		for (String s : messages) {
			if (s.contains("test killed")) {
				killed = true;
				break;
			}
		}
		messages.clear();
		if (killed)
			messages.add("The AI submitted a new test, which killed at least one mutant.");
		else
			messages.add("The AI submitted a new test, which did not kill any mutant.");
		return messages;
	}
}

