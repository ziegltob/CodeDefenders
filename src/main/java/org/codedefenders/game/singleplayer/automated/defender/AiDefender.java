/*
 * Copyright (C) 2016-2019 Code Defenders contributors
 *
 * This file is part of Code Defenders.
 *
 * Code Defenders is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Code Defenders is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Code Defenders. If not, see <http://www.gnu.org/licenses/>.
 */
package org.codedefenders.game.singleplayer.automated.defender;

import org.codedefenders.database.DatabaseAccess;
import org.apache.commons.lang3.Range;
import org.codedefenders.database.TestDAO;
import org.codedefenders.execution.AntRunner;
import org.codedefenders.execution.MutationTester;
import org.codedefenders.execution.TargetExecution;
import org.codedefenders.execution.ExecutorPool;
import org.codedefenders.game.Mutant;
import org.codedefenders.game.*;
import org.codedefenders.game.Test;
import org.codedefenders.game.duel.DuelGame;
import org.codedefenders.game.multiplayer.PlayerScore;
import org.codedefenders.game.singleplayer.AiPlayer;
import org.codedefenders.game.singleplayer.NoDummyGameException;
import org.codedefenders.database.AdminDAO;
import org.codedefenders.servlets.admin.AdminSystemSettings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * @author Ben Clegg
 * An AI defender. Uses tests generated by EvoSuite to kill mutants.
 */
public class AiDefender extends AiPlayer {

	private static final Logger logger = LoggerFactory.getLogger(AiDefender.class);

	public static final int ID = 2;

	public AiDefender(int gameId) {
		super(DatabaseAccess.getMultiplayerGame(gameId));
		role = Role.DEFENDER;
	}
	public boolean turnHard() {
		return runTurn(GenerationMethod.KILLCOUNT);
	}

	public boolean turnEasy() {
        return runTurn(GenerationMethod.RANDOM);
	}

	/**
	 * Attempts to submit a test, according to a strategy
	 * @param strat Generation strategy to use
	 * @return true if test submitted, false otherwise
	 */
	public boolean runTurn(GenerationMethod strat) {
		multiplayerGame = DatabaseAccess.getMultiplayerGame(game.getId());
		if (multiplayerGame.getState() == GameState.FINISHED) {
			if (DatabaseAccess.getJoinedMultiplayerGamesForUser(AiDefender.ID).stream()
					.filter(joinedGames -> joinedGames.getId() == multiplayerGame.getId())
					.findFirst().isPresent()) {
				int aiDefenderPlayerId = IntStream.of(multiplayerGame.getDefenderIds())
						.filter(id -> DatabaseAccess.getUserFromPlayer(id).getId() == AiDefender.ID).findFirst().getAsInt();
				ExecutorPool.getInstanceOf().cancelTask(aiDefenderPlayerId, true);
				return false;
			}
		}

		// should the bot actually do something: depends on game score and mutant/test relation
		// numbers are made up and calculated from the db dump of a testing session
		// TODO: move this to AiPlayer class together with the similar function in AiAttacker
		HashMap mutantScores = multiplayerGame.getMutantScores();
		HashMap testScores = multiplayerGame.getTestScores();
		int attackerScore = 0;
		int defenderScore = 0;
		if (mutantScores.containsKey(-1) && mutantScores.get(-1) != null) {
			attackerScore += ((PlayerScore) mutantScores.get(-1)).getTotalScore();
		}
		if (testScores.containsKey(-2) && testScores.get(-2) != null) {
			attackerScore += ((PlayerScore) testScores.get(-2)).getTotalScore();
		}
		if (testScores.containsKey(-1) && testScores.get(-1) != null) {
			defenderScore += ((PlayerScore) testScores.get(-1)).getTotalScore();
		}
		if (defenderScore + AdminDAO.getSystemSetting(AdminSystemSettings.SETTING_NAME.AI_DEFENDER_POINTS_DIFFERENCE).getIntValue() > attackerScore
				|| multiplayerGame.getMutants().size() < multiplayerGame.getTests().size() * AdminDAO.getSystemSetting(AdminSystemSettings.SETTING_NAME.AI_TEST_MUTANT_RELATION).getFloatValue()
				|| multiplayerGame.getMutants().size() == 0
				|| multiplayerGame.getAliveMutants().size() == 0) {
			logger.info("AI-Defender doing nothing due to game scores or test-mutant relation.");
			return false;
		}

		try {
			int tNum = selectTest(strat);
			useTestFromSuite(tNum);
		} catch (NoTestsException e) {
			//No more choices remain - do nothing
			return false;
		} catch (Exception e) {
			//Something's gone wrong
			e.printStackTrace();
			return false;
		}

		return true;
	}

	private int selectTest(GenerationMethod strategy) throws NoTestsException, NoDummyGameException {
        // For further development (singleplayer, DuelGame AI) the game has to be set correctly depending on the GameMode
		List<Integer> usedTests = DatabaseAccess.getUsedAiTestsForGame(game);
		GameClass cut = game.getCUT();
		DuelGame dummyGame = cut.getDummyGame();

		List<Test> candidateTests = DatabaseAccess.getTestsForGame(dummyGame.getId()).stream().filter(test -> !usedTests.contains(test.getId())).collect(Collectors.toList());

		if(candidateTests.isEmpty()) {
			throw new NoTestsException("All generated tests have already been used.");
		}

		switch(strategy) {
			case COVERAGE:
				return getTestIdByCoverage(candidateTests);

			case RANDOM:
				return getTestIdByRandom(candidateTests);

			case KILLCOUNT:
				return getTestIdByKillcount(candidateTests);

			default:
				throw new UnsupportedOperationException("Invalid strategy for AI defender");
		}
	}

	private int getTestIdByCoverage(List<Test> possibleTests) {
		// HashMap Key: line number of class, Value: total count how many tests and mutants are covering this line
		HashMap<Integer, Integer> modifiedLines = new HashMap<>();
		GameClass cut = game.getCUT();
		List<Range<Integer>> linesOfCoverableCode = new ArrayList<>();
		linesOfCoverableCode.addAll(cut.getLinesOfMethods());

		for (Test test :  multiplayerGame.getTests()) {
			for (Integer line : test.getLineCoverage().getLinesCovered()) {
				if (modifiedLines.keySet().contains(line)) {
					Integer i = modifiedLines.get(line);
					modifiedLines.put(line, ++i);
				} else {
					modifiedLines.put(line, 1);
				}
			}
		}

		for (Mutant m : multiplayerGame.getMutants()) {
			for (Integer line : m.getLines()) {
				if (modifiedLines.keySet().contains(line)) {
					Integer i = modifiedLines.get(line);
					modifiedLines.put(line, ++i);
				} else {
					modifiedLines.put(line, 1);
				}
			}
		}
		logger.debug("All modified lines: {}", modifiedLines.toString());

		// check if there are lines that are not covered at all and if there are any find a test for those lines
		for (Range<Integer> coverableLines : linesOfCoverableCode) {
			for (int i = coverableLines.getMinimum(); i <= coverableLines.getMaximum(); ++i) {
				if (!modifiedLines.keySet().contains(i)) {
					final int line = i;
					Test selectedTest = possibleTests.stream()
							.filter(test -> test.getLineCoverage().getLinesCovered().contains(line))
							.findFirst().orElse(null);
					if (selectedTest != null) {
						return selectedTest.getId();
					} else {
						continue;
					}
				}
			}
		}

		// sort the map so the lines covered the least are on top
		Map<Integer, Integer> sortedModifiedLines = modifiedLines.entrySet().stream()
				.sorted(Map.Entry.comparingByValue(Comparator.naturalOrder()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
						(oldValue, newValue) -> oldValue, LinkedHashMap::new));

		for (Map.Entry<Integer, Integer> line : sortedModifiedLines.entrySet()) {
            Test selectedTest = possibleTests.stream()
                    .filter(test -> test.getLineCoverage().getLinesCovered().contains(line))
                    .findFirst().orElse(null);
            if (selectedTest != null) {
                return selectedTest.getId();
            }
		}

		return -1;
	}

	private int getTestIdByKillcount(List<Test> possibleTests) {
		Collections.sort(possibleTests, new TestComparator());
		List<Mutant> aliveMutants = multiplayerGame.getAliveMutants();
		aliveMutants.sort(Collections.reverseOrder(Comparator.comparing(Mutant::getScore)));

		// HashMap Key: mutantId, Value: List of Tests that cover this Mutant
		HashMap<Integer, List<Test>> mutantCoveredByTests = new HashMap<>();
		for (Test possibleTest : possibleTests) {
			for (Mutant mutant : possibleTest.getCoveredMutants(aliveMutants)) {
				if (mutantCoveredByTests.keySet().contains(mutant.getId())) {
					mutantCoveredByTests.get(mutant.getId()).add(possibleTest);
				} else {
					List<Test> testList = new ArrayList<>();
					testList.add(possibleTest);
					mutantCoveredByTests.put(mutant.getId(), testList);
				}
			}
		}

		// only try to kill one of the top x(=5 for now) or else the move might take too long
		int skipAiDefenderMove = 0;
		for (Mutant aliveMutant : aliveMutants) {
			if (mutantCoveredByTests.containsKey(aliveMutant.getId())) {
				// counter to only try a certain amount of tests on one mutant
				int skipMutantCounter = 0;
				for (Test test : mutantCoveredByTests.get(aliveMutant.getId())) {
					// the test does not kill the mutant here. it is only checked if the test would kill it
                    boolean takeTest = MutationTester.testOnMutantWithoutKilling(multiplayerGame, test, aliveMutant);
					if (takeTest) {
						return test.getId();
					}
					if (skipMutantCounter > 5) {
						break;
					}
					++skipMutantCounter;
				}
			}
			if (skipAiDefenderMove > 5) {
				return -1;
			}
			++skipAiDefenderMove;
		}
		return -1;
	}

	private int getTestIdByRandom(List<Test> possibleTests) {
		Random r = new Random();
		Test selected = possibleTests.get(r.nextInt(possibleTests.size()));
		return selected.getId();
	}

	private void useTestFromSuite(int origTestNum) throws NoDummyGameException {
		if (origTestNum != -1) {
			GameClass cut = game.getCUT();
			DuelGame dummyGame = cut.getDummyGame();
			List<Test> origTests = DatabaseAccess.getTestsForGame(dummyGame.getId());

			Test origTest = null;

			for (Test t : origTests) {
				if (t.getId() == origTestNum) {
					origTest = t;
					break;
				}
			}

			if (origTest != null) {
				String jFile = origTest.getJavaFile();
				if (origTest.getClassFile() == null) {
					origTest = AntRunner.recompileTest(origTest.getId(), cut);
				}

				String cFile = origTest.getClassFile();
				int playerId = DatabaseAccess.getPlayerIdForMultiplayerGame(ID, game.getId());
				//TODO: ADD ACTUAL CLASSID OR MAYBE EVEN OTHER CONSTRUCTOR
				Test t = new Test(-5,game.getId(), jFile, cFile, playerId);
				File dir = new File(origTest.getDirectory());
				TestDAO.storeTest(t, false);
				t.setLineCoverage(origTest.getLineCoverage());
				t.update();

				// Insert target executions since the tests have already been compiled when the players submitted them
				// There might be issues with the compiled tests but when the class is not compiled it was
				// recompiled in line 247 (theoretically this could also go wrong but then it just won't score)
				TargetExecution newExec = new TargetExecution(t.getId(), 0, TargetExecution.Target.COMPILE_TEST, TargetExecution.Status.SUCCESS, null);
				newExec.insert();
				TargetExecution testExecution = new TargetExecution(t.getId(), 0, TargetExecution.Target.TEST_ORIGINAL, TargetExecution.Status.SUCCESS, null);
				testExecution.insert();
				MutationTester.runTestOnAllMultiplayerMutants(multiplayerGame, t, messages);
				DatabaseAccess.setAiTestAsUsed(origTestNum, game);
				multiplayerGame.update();
				getMessagesLastTurn();
			}
		} else {
			logger.info("Ai Defender did not find a Test to use from the TestPool.");
		}
	}

	@Override
	public ArrayList<String> getMessagesLastTurn() {
		boolean killed = false;
		for (String s : messages) {
			if (s.contains("test killed")) {
				killed = true;
				break;
			}
		}
		messages.clear();
		if (killed)
			messages.add("The AI submitted a new test, which killed at least one mutant.");
		else
			messages.add("The AI submitted a new test, which did not kill any mutant.");
		return messages;
	}
}

